{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8882190",
   "metadata": {},
   "outputs": [],
   "source": [
    "import urllib.request\n",
    "import urllib.parse\n",
    "import time\n",
    "import re\n",
    "\n",
    "# Input protein sequence\n",
    "sequence = \"MLDDSYFMKQALVEAAKAGERGEVPVGAVVVCKERIIARAHNLTETLNDVTAHAEMQAITAAANVLGGKYLNECTLYVTVEPCVMCAGAIAWAQTGKLVFGAEDEKRGYQRYAPKSLHPKTVVVKGILADECANLMKIFFASKRR\"\n",
    "\n",
    "# Step 1: Submit the BLASTP request\n",
    "params = {\n",
    "    'CMD': 'Put',\n",
    "    'PROGRAM': 'blastp',\n",
    "    'DATABASE': 'nr',\n",
    "    'QUERY': sequence,\n",
    "    #'FORMAT_TYPE': 'JSON2',\n",
    "    'ENTREZ_QUERY': '\"Bacteroides\"[organism]'\n",
    "}\n",
    "data = urllib.parse.urlencode(params).encode('utf-8')\n",
    "request = urllib.request.Request('https://blast.ncbi.nlm.nih.gov/Blast.cgi', data=data)\n",
    "with urllib.request.urlopen(request) as response:\n",
    "    response_text = response.read().decode('utf-8')\n",
    "\n",
    "# Extract RID and RTOE\n",
    "rid = re.search(r'RID = ([\\w-]+)', response_text).group(1)\n",
    "rtoe = int(re.search(r'RTOE = (\\d+)', response_text).group(1))\n",
    "print(f\"RID: {rid}, Estimated wait time: {rtoe} seconds\")\n",
    "\n",
    "# Step 2: Wait before checking\n",
    "time.sleep(rtoe + 5)\n",
    "\n",
    "# Step 3: Poll until results are ready\n",
    "while True:\n",
    "    check_params = urllib.parse.urlencode({\n",
    "        'CMD': 'Get',\n",
    "        'RID': rid,\n",
    "        'FORMAT_OBJECT': 'SearchInfo'\n",
    "    })\n",
    "    check_url = f\"https://blast.ncbi.nlm.nih.gov/Blast.cgi?{check_params}\"\n",
    "    with urllib.request.urlopen(check_url) as response:\n",
    "        check_text = response.read().decode('utf-8')\n",
    "\n",
    "    if \"Status=WAITING\" in check_text:\n",
    "        print(\"Still waiting...\")\n",
    "        time.sleep(10)\n",
    "\n",
    "    elif \"Status=FAILED\" in check_text or \"Status=UNKNOWN\" in check_text:\n",
    "        raise Exception(\"BLAST search failed or unknown RID\")\n",
    "    \n",
    "    elif \"Status=READY\" in check_text and \"ThereAreHits=yes\" in check_text:\n",
    "        break\n",
    "\n",
    "# Step 4: Retrieve results\n",
    "result_params = urllib.parse.urlencode({\n",
    "    'CMD': 'Get',\n",
    "    'RID': rid,\n",
    "    'FORMAT_TYPE': 'TEXT'\n",
    "})\n",
    "result_url = f\"https://blast.ncbi.nlm.nih.gov/Blast.cgi?{result_params}\"\n",
    "with urllib.request.urlopen(result_url) as response:\n",
    "    result = response.read().decode('utf-8')\n",
    "\n",
    "print(result)  # You can also write this to a file\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7baa10cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0645de7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides hominis\n",
      "Bacteroides hominis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides \n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides\n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides thetaiotaomic\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides thetaiotaomic\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides sp.\n",
      "Bacteroides sp.\n",
      "Bacteroides thetaiotaomic\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides\n",
      "Bacteroides ovatus\n",
      "Bacteroides fragilis\n",
      "Bacteroides difficilis\n",
      "Bacteroides sp. f07\n",
      "Bacteroides\n",
      "Bacteroides congonensis\n",
      "Bacteroides sp. 3_1_13\n",
      "Bacteroides faecichinchil\n",
      "Bacteroides\n",
      "Bacteroides reticulotermi\n",
      "Bacteroides congonensis\n",
      "Bacteroides faecalis\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides caecimuris\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides ovatus\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides caecimuris\n",
      "Bacteroides ovatus\n",
      "Bacteroides bouchesdurhon\n",
      "Bacteroides faecium\n",
      "Bacteroides pyogenes\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides bouchesdurhon\n",
      "Bacteroidac\n",
      "Bacteroides\n",
      "Bacteroides ovatus\n",
      "Candidatus Bacteroides intest\n",
      "Bacteroides sp.\n",
      "Bacteroides sp.\n",
      "Bacteroides\n",
      "Bacteroides xylanisolvens\n",
      "Bacteroides\n",
      "Bacteroides salyersiae\n",
      "Bacteroides ovatus\n",
      "Bacteroides\n",
      "Bacteroides sp. L008\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "Bacteroides\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides caecimuris\n",
      "Bacteroides pyogenes\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides bouchesdurhon\n",
      "Bacteroides\n",
      "Bacteroides sp. 90-K9/2\n",
      "Bacteroides sp.\n",
      "Bacteroides py\n",
      "Bacteroides salyersiae\n",
      "Bacteroides ovatus\n",
      "Bacteroides\n",
      "Bacteroides acidifaciens\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides sp.\n",
      "Bacteroides\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides sp. PHL 2737\n",
      "Bacteroides\n",
      "Bacteroides fragilis CAG:558\n",
      "Bacteroides fragilis\n",
      "Bacteroides \n",
      "fragilis 3_1_12\n",
      "Bacteroides fragilis HMW \n",
      "616\n",
      "Bacteroides hominis\n",
      "Bacteroides\n",
      "Bacteroides fragilis HMW \n",
      "610\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides\n",
      "Bacteroides fragilis str. 3397 T10\n",
      "Bacteroides fragilis str. B1 (UDC16-1)\n",
      "Bacteroides fragilis CAG:47\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis str. 3783N1-2\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis str. DS-208\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides hominis\n",
      "Bacteroides hominis\n",
      "Bacteroides hominis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis str. 3774 T13\n",
      "Bacteroides fragilis str. 3986T(B)10\n",
      "Bacteroides fragilis str. 3986 T(B)9\n",
      "Bacteroides fragilis str. 3996 N(B) 6\n",
      "Bacteroides fragilis str. 3998T(B)3\n",
      "Bacteroides fragilis str. 3998 T(B) 4\n",
      "Bacteroides fragilis str. DS-166\n",
      "Bacteroides fragilis str. S36L11\n",
      "Bacteroides fragilis str. 3-F-2 #6\n",
      "Bacteroides fragilis str. J38-1\n",
      "Bacteroides fragilis str. S6L3\n",
      "Bacteroides fragilis str. S6R6\n",
      "Bacteroides fragilis str. 1009-4-F #10\n",
      "Bacteroides fragilis str. 1009-4-F #7\n",
      "Bacteroides fragilis str. 3986 N(B)22\n",
      "Bacteroides fragilis str. 3986 T(B)13\n",
      "Bacteroides fragilis str. S24L15\n",
      "Bacteroides fragilis str. S24L26\n",
      "Bacteroides fragilis str. S24L34\n",
      "Bacteroides fragilis str. S36L12\n",
      "Bacteroides fragilis str. S36L5\n",
      "Bacteroides fragilis str. S6L8\n",
      "Bacteroides fragilis str. S6R5\n",
      "Bacteroides fragilis str. S38L3\n",
      "Bacteroides fragilis str. S6L5\n",
      "Bacteroides fragilis str. S6R8\n",
      "Bacteroides fragilis str. 3986 N3\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis CL05T00C42\n",
      "Bacteroides fragilis CL05T12C13\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron \n",
      "VPI-5482\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron \n",
      "dnLKV9\n",
      "Bacteroides sp. AM23-12\n",
      "Bacteroides thetaiotaomicron \n",
      "CAG:40\n",
      "Bacteroides sp. AR20\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides\n",
      "Bacteroides \n",
      "sp. 1_1_14\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides\n",
      "Bacteroides finegoldii \n",
      "CL09T03C10\n",
      "Bacteroides difficilis\n",
      "Bacteroides zhangwenhongii\n",
      "Bacteroides zhangwenhongii\n",
      "Bacteroides finegoldii\n",
      "Bacteroides\n",
      "Bacteroides \n",
      "finegoldii CAG:203\n",
      "Bacteroides \n",
      "finegoldii DSM 17565\n",
      "Bacteroides finegoldii\n",
      "Bacteroides finegoldii\n",
      "Bacteroides finegoldii\n",
      "Bacteroides sp.\n",
      "Bacteroides sp.\n",
      "Bacteroides sp.\n",
      "Bacteroides thetaiotaomicron\n",
      "Bacteroides thetaiotaomicron\n",
      "uncultured Bacteroides sp.\n",
      "Bacteroides\n",
      "Bacteroides faecis\n",
      "Bacteroides faecis\n",
      "Bacteroides faecis\n",
      "Bacteroides faecis\n",
      "Bacteroides faecis\n",
      "Bacteroides ovatus\n",
      "Bacteroides ovatus\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides fragilis\n",
      "Bacteroides difficilis\n",
      "Bacteroides difficilis\n",
      "Bacteroides sp. f07\n",
      "Bacteroides\n",
      "Bacteroides caccae CAG:21\n",
      "Bacteroides caccae\n",
      "Bacteroides \n",
      "caccae ATCC 43185\n",
      "Bacteroides caccae CL03T12C61\n",
      "Bacteroides caccae\n",
      "Bacteroides congonensis\n",
      "Bacteroides sp. 3_1_13\n",
      "Bacteroides sp. 3_1_13\n",
      "Bacteroides faecichinchillae\n",
      "Bacteroides faecichinchillae\n",
      "Bacteroides faecichinchillae\n",
      "Bacteroides faecichinchillae\n",
      "Bacteroides\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides acidifaciens\n",
      "Bacteroides reticulotermitis\n",
      "Bacteroides reticulotermitis\n",
      "Bacteroides reticulotermitis \n",
      "JCM 10512\n",
      "Bacteroides reticulotermitis\n",
      "done\n",
      "Length=146\n",
      "\n",
      " Score = 275 bits (704),  Expect = 5e-95, Method: Compositional matrix adjust.\n",
      " Identities = 130/144 (90%), Positives = 139/144 (97%), Gaps = 0/144 (0%)\n",
      "\n",
      "Query  1    MLDDSYFMKQALVEAAKAGERGEVPVGAVVVCKERIIARAHNLTETLNDVTAHAEMQAIT  60\n",
      "            MLDD+YFMKQAL+EA KAGERGEVPVGA+VVCKERIIARAHNLTETL DVTAHAEMQAIT\n",
      "Sbjct  1    MLDDTYFMKQALIEAQKAGERGEVPVGAIVVCKERIIARAHNLTETLTDVTAHAEMQAIT  60\n",
      "\n",
      "Query  61   AAANVLGGKYLNECTLYVTVEPCVMCAGAIAWAQTGKLVFGAEDEKRGYQRYAPKSLHPK  120\n",
      "            AAANVLGGKYLNECTLYVTVEPCVMCAGAIAWAQTGKLVFGAEDEKRGYQ+YA ++LHPK\n",
      "Sbjct  61   AAANVLGGKYLNECTLYVTVEPCVMCAGAIAWAQTGKLVFGAEDEKRGYQKYASEALHPK  120\n",
      "\n",
      "Query  121  TVVVKGILADECANLMKIFFASKR  144\n",
      "            TVVVKG+LAD+CA LMK FFA+KR\n",
      "Sbjct  121  TVVVKGVLADKCAELMKQFFAAKR  144\n",
      "\n",
      "\n",
      "  Database: All non-redundant GenBank CDS translations+PDB+SwissProt+PIR+PRF\n",
      "excluding environmental samples from WGS projects\n",
      "    Posted date:  May 1, 2025  3:42 AM\n",
      "  Number of letters in database: 1,361,779,000\n",
      "  Number of sequences in database:  3,395,284\n",
      "\n",
      "Lambda      K        H\n",
      "   0.321    0.133    0.390 \n",
      "Gapped\n",
      "Lambda      K        H\n",
      "   0.267   0.0410    0.140 \n",
      "Matrix: BLOSUM62\n",
      "Gap Penalties: Existence: 11, Extension: 1\n",
      "Number of Sequences: 3395284\n",
      "Number of Hits to DB: 52140\n",
      "Number of extensions: 53\n",
      "Number of successful extensions: 17\n",
      "Number of sequences better than 100: 11\n",
      "Number of HSP's better than 100 without gapping: 0\n",
      "Number of HSP's gapped: 17\n",
      "Number of HSP's successfully gapped: 11\n",
      "Length of query: 145\n",
      "Length of database: 1361779000\n",
      "Length adjustment: 111\n",
      "Effective length of query: 34\n",
      "Effective length of database: 984902476\n",
      "Effective search space: 33486684184\n",
      "Effective search space used: 33486684184\n",
      "T: 20\n",
      "A: 40\n",
      "X1: 16 (7.4 bits)\n",
      "X2: 38 (14.6 bits)\n",
      "X3: 64 (24.7 bits)\n",
      "S1: 41 (20.4 bits)\n",
      "S2: 62 (28.5 bits)\n",
      "ka-blk-alpha gapped: 1.9\n",
      "ka-blk-alpha ungapped: 0.7916\n",
      "ka-blk-alpha_v gapped: 42.6028\n",
      "ka-blk-alpha_v ungapped: 4.96466\n",
      "ka-blk-sigma gapped: 43.6362\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Sequences producing significant alignments:\n",
    "#ALIGNMENTS\n",
    "\n",
    "pre_result = result\n",
    "\n",
    "loop = True\n",
    "specie = list()\n",
    "while loop:\n",
    "    try:\n",
    "\n",
    "        start = pre_result.index(\"[\")\n",
    "        stop = pre_result.index(\"]\")\n",
    "\n",
    "        if stop-start > 50:\n",
    "            stop = pre_result.index(\"...\")\n",
    "        else:\n",
    "            specie.append(pre_result[start+1:stop])\n",
    "\n",
    "        print(pre_result[start+1:stop])\n",
    "        pre_result = pre_result[stop+2:]\n",
    "\n",
    "    except ValueError:\n",
    "        print(\"done\")\n",
    "        print(pre_result)\n",
    "        specie = sorted(list(dict.fromkeys(specie)))\n",
    "        loop = False\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d44d54ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Bacteroides',\n",
       " 'Bacteroides \\ncaccae ATCC 43185',\n",
       " 'Bacteroides \\nfinegoldii CAG:203',\n",
       " 'Bacteroides \\nfinegoldii DSM 17565',\n",
       " 'Bacteroides \\nfragilis 3_1_12',\n",
       " 'Bacteroides \\nsp. 1_1_14',\n",
       " 'Bacteroides acidifaciens',\n",
       " 'Bacteroides caccae',\n",
       " 'Bacteroides caccae CAG:21',\n",
       " 'Bacteroides caccae CL03T12C61',\n",
       " 'Bacteroides caecimuris',\n",
       " 'Bacteroides congonensis',\n",
       " 'Bacteroides difficilis',\n",
       " 'Bacteroides faecalis',\n",
       " 'Bacteroides faecichinchillae',\n",
       " 'Bacteroides faecis',\n",
       " 'Bacteroides faecium',\n",
       " 'Bacteroides finegoldii',\n",
       " 'Bacteroides finegoldii \\nCL09T03C10',\n",
       " 'Bacteroides fragilis',\n",
       " 'Bacteroides fragilis CAG:47',\n",
       " 'Bacteroides fragilis CAG:558',\n",
       " 'Bacteroides fragilis CL05T00C42',\n",
       " 'Bacteroides fragilis CL05T12C13',\n",
       " 'Bacteroides fragilis HMW \\n610',\n",
       " 'Bacteroides fragilis HMW \\n616',\n",
       " 'Bacteroides fragilis str. 1009-4-F #10',\n",
       " 'Bacteroides fragilis str. 1009-4-F #7',\n",
       " 'Bacteroides fragilis str. 3-F-2 #6',\n",
       " 'Bacteroides fragilis str. 3397 T10',\n",
       " 'Bacteroides fragilis str. 3774 T13',\n",
       " 'Bacteroides fragilis str. 3783N1-2',\n",
       " 'Bacteroides fragilis str. 3986 N(B)22',\n",
       " 'Bacteroides fragilis str. 3986 N3',\n",
       " 'Bacteroides fragilis str. 3986 T(B)13',\n",
       " 'Bacteroides fragilis str. 3986 T(B)9',\n",
       " 'Bacteroides fragilis str. 3986T(B)10',\n",
       " 'Bacteroides fragilis str. 3996 N(B) 6',\n",
       " 'Bacteroides fragilis str. 3998 T(B) 4',\n",
       " 'Bacteroides fragilis str. 3998T(B)3',\n",
       " 'Bacteroides fragilis str. B1 (UDC16-1)',\n",
       " 'Bacteroides fragilis str. DS-166',\n",
       " 'Bacteroides fragilis str. DS-208',\n",
       " 'Bacteroides fragilis str. J38-1',\n",
       " 'Bacteroides fragilis str. S24L15',\n",
       " 'Bacteroides fragilis str. S24L26',\n",
       " 'Bacteroides fragilis str. S24L34',\n",
       " 'Bacteroides fragilis str. S36L11',\n",
       " 'Bacteroides fragilis str. S36L12',\n",
       " 'Bacteroides fragilis str. S36L5',\n",
       " 'Bacteroides fragilis str. S38L3',\n",
       " 'Bacteroides fragilis str. S6L3',\n",
       " 'Bacteroides fragilis str. S6L5',\n",
       " 'Bacteroides fragilis str. S6L8',\n",
       " 'Bacteroides fragilis str. S6R5',\n",
       " 'Bacteroides fragilis str. S6R6',\n",
       " 'Bacteroides fragilis str. S6R8',\n",
       " 'Bacteroides hominis',\n",
       " 'Bacteroides ovatus',\n",
       " 'Bacteroides pyogenes',\n",
       " 'Bacteroides reticulotermitis',\n",
       " 'Bacteroides reticulotermitis \\nJCM 10512',\n",
       " 'Bacteroides salyersiae',\n",
       " 'Bacteroides sp.',\n",
       " 'Bacteroides sp. 3_1_13',\n",
       " 'Bacteroides sp. 90-K9/2',\n",
       " 'Bacteroides sp. AM23-12',\n",
       " 'Bacteroides sp. AR20',\n",
       " 'Bacteroides sp. L008',\n",
       " 'Bacteroides sp. PHL 2737',\n",
       " 'Bacteroides sp. f07',\n",
       " 'Bacteroides thetaiotaomicron',\n",
       " 'Bacteroides thetaiotaomicron \\nCAG:40',\n",
       " 'Bacteroides thetaiotaomicron \\nVPI-5482',\n",
       " 'Bacteroides thetaiotaomicron \\ndnLKV9',\n",
       " 'Bacteroides xylanisolvens',\n",
       " 'Bacteroides zhangwenhongii',\n",
       " 'uncultured Bacteroides sp.']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(specie)\n",
    "specie"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e75111ee",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
